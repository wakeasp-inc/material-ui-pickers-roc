{
  "ModalWrapper": {
    "okLabel": {
      "defaultValue": {
        "value": "OK"
      },
      "description": "\"OK\" label message",
      "name": "okLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/wrappers/ModalWrapper.tsx",
        "name": "ModalWrapperProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "cancelLabel": {
      "defaultValue": {
        "value": "Cancel"
      },
      "description": "\"CANCEL\" label message",
      "name": "cancelLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/wrappers/ModalWrapper.tsx",
        "name": "ModalWrapperProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "clearLabel": {
      "defaultValue": {
        "value": "Clear"
      },
      "description": "\"CLEAR\" label message",
      "name": "clearLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/wrappers/ModalWrapper.tsx",
        "name": "ModalWrapperProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "todayLabel": {
      "defaultValue": {
        "value": "Today"
      },
      "description": "\"TODAY\" label message",
      "name": "todayLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/wrappers/ModalWrapper.tsx",
        "name": "ModalWrapperProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "showTodayButton": {
      "defaultValue": {
        "value": false
      },
      "description": "If true today button will be displayed <b>Note*</b> that clear button has higher priority",
      "name": "showTodayButton",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/wrappers/ModalWrapper.tsx",
        "name": "ModalWrapperProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "clearable": {
      "defaultValue": {
        "value": false
      },
      "description": "Show clear action in picker dialog",
      "name": "clearable",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/wrappers/ModalWrapper.tsx",
        "name": "ModalWrapperProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "DialogProps": {
      "defaultValue": null,
      "description": "Props to be passed directly to material-ui Dialog",
      "name": "DialogProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/wrappers/ModalWrapper.tsx",
        "name": "ModalWrapperProps"
      },
      "required": false,
      "type": {
        "name": "Partial<MuiDialogProps>"
      }
    }
  },
  "DatePicker": {
    "minDateMessage": {
      "defaultValue": {
        "value": "'Date should not be before minimal date'"
      },
      "description": "Error message, shown if date is less then minimal date",
      "name": "minDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "DateValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "maxDateMessage": {
      "defaultValue": {
        "value": "'Date should not be after maximal date'"
      },
      "description": "Error message, shown if date is more then maximal date",
      "name": "maxDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "DateValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "invalidDateMessage": {
      "defaultValue": {
        "value": "'Invalid Date Format'"
      },
      "description": "Message, appearing when date cannot be parsed",
      "name": "invalidDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "BaseValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "value": {
      "defaultValue": null,
      "description": "Picker value",
      "name": "value",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": true,
      "type": {
        "name": "ParsableDate"
      }
    },
    "onChange": {
      "defaultValue": null,
      "description": "onChange callback",
      "name": "onChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": true,
      "type": {
        "name": "(date: DateIOType) => void"
      }
    },
    "autoOk": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Auto accept date on selection",
      "name": "autoOk",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "format": {
      "defaultValue": null,
      "description": "Format string",
      "name": "format",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disable datepicker and text field\nIf `true`, the `input` element will be disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "labelFunc": {
      "defaultValue": null,
      "description": "Dynamic formatter of text field value",
      "name": "labelFunc",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType, invalidLabel: string) => string"
      }
    },
    "initialFocusedDate": {
      "defaultValue": null,
      "description": "Date that will be initially highlighted if null was passed",
      "name": "initialFocusedDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "invalidLabel": {
      "defaultValue": {
        "value": "'unknown'"
      },
      "description": "Message displaying in text field if date is invalid (doesn't work in keyboard mode)",
      "name": "invalidLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "emptyLabel": {
      "defaultValue": {
        "value": "' '"
      },
      "description": "Message displaying in text field, if null passed (doesn't work in keyboard mode)",
      "name": "emptyLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "onAccept": {
      "defaultValue": null,
      "description": "Callback fired when date is accepted",
      "name": "onAccept",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void"
      }
    },
    "onError": {
      "defaultValue": null,
      "description": "Callback fired when new error should be displayed\n(!! This is a side effect. Be careful if you want to rerender the component)",
      "name": "onError",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(error: ReactNode, value: DateIOType) => void"
      }
    },
    "onOpen": {
      "defaultValue": null,
      "description": "On open callback",
      "name": "onOpen",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onClose": {
      "defaultValue": null,
      "description": "On close callback",
      "name": "onClose",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "open": {
      "defaultValue": null,
      "description": "Controlled picker open state",
      "name": "open",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disableToolbar": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Hide toolbar and show only date/time views",
      "name": "disableToolbar",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "orientation": {
      "defaultValue": {
        "value": "\"portrait\""
      },
      "description": "Force rendering in particular orientation",
      "name": "orientation",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "\"portrait\" | \"landscape\""
      }
    },
    "ToolbarComponent": {
      "defaultValue": null,
      "description": "Component that will replace default toolbar renderer",
      "name": "ToolbarComponent",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "ComponentClass<ToolbarComponentProps, any> | FunctionComponent<ToolbarComponentProps>"
      }
    },
    "variant": {
      "defaultValue": {
        "value": "'dialog'"
      },
      "description": "Picker container option",
      "name": "variant",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "\"dialog\" | \"inline\" | \"static\""
      }
    },
    "PopoverProps": {
      "defaultValue": null,
      "description": "Popover props passed to material-ui Popover (with variant=\"inline\")",
      "name": "PopoverProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/wrappers/InlineWrapper.tsx",
        "name": "InlineWrapperProps"
      },
      "required": false,
      "type": {
        "name": "Partial<PopoverProps>"
      }
    },
    "label": {
      "defaultValue": null,
      "description": "The label content.",
      "name": "label",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "select": {
      "defaultValue": null,
      "description": "Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\nIf this option is set you must pass the options of the select as children.",
      "name": "select",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "defaultValue": {
      "defaultValue": null,
      "description": "The default value of the `input` element.",
      "name": "defaultValue",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "unknown"
      }
    },
    "id": {
      "defaultValue": null,
      "description": "The id of the `input` element.\nUse this prop to make `label` and `helperText` accessible for screen readers.",
      "name": "id",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "placeholder": {
      "defaultValue": null,
      "description": "The short hint displayed in the input before the user enters a value.",
      "name": "placeholder",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "color": {
      "defaultValue": null,
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "name": "color",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"primary\" | \"secondary\""
      }
    },
    "children": {
      "defaultValue": null,
      "description": "@ignore",
      "name": "children",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "error": {
      "defaultValue": null,
      "description": "If `true`, the label will be displayed in an error state.",
      "name": "error",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "fullWidth": {
      "defaultValue": null,
      "description": "If `true`, the input will take up the full width of its container.",
      "name": "fullWidth",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "margin": {
      "defaultValue": null,
      "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
      "name": "margin",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"none\" | \"dense\" | \"normal\""
      }
    },
    "required": {
      "defaultValue": null,
      "description": "If `true`, the label is displayed as required and the `input` element` will be required.",
      "name": "required",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "size": {
      "defaultValue": null,
      "description": "The size of the text field.",
      "name": "size",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"small\" | \"medium\""
      }
    },
    "autoComplete": {
      "defaultValue": null,
      "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
      "name": "autoComplete",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "autoFocus": {
      "defaultValue": null,
      "description": "If `true`, the `input` element will be focused during the first mount.",
      "name": "autoFocus",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "FormHelperTextProps": {
      "defaultValue": null,
      "description": "Props applied to the [`FormHelperText`](/api/form-helper-text/) element.",
      "name": "FormHelperTextProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<OverrideProps<FormHelperTextTypeMap<{}, \"p\">, \"p\">>"
      }
    },
    "helperText": {
      "defaultValue": null,
      "description": "The helper text content.",
      "name": "helperText",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "InputLabelProps": {
      "defaultValue": null,
      "description": "Props applied to the [`InputLabel`](/api/input-label/) element.",
      "name": "InputLabelProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<InputLabelProps>"
      }
    },
    "inputRef": {
      "defaultValue": null,
      "description": "Pass a ref to the `input` element.",
      "name": "inputRef",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "(instance: any) => void"
      }
    },
    "multiline": {
      "defaultValue": null,
      "description": "If `true`, a textarea element will be rendered instead of an input.",
      "name": "multiline",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "name": {
      "defaultValue": null,
      "description": "Name attribute of the `input` element.",
      "name": "name",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "rows": {
      "defaultValue": null,
      "description": "Number of rows to display when multiline option is set to true.",
      "name": "rows",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string | number"
      }
    },
    "rowsMax": {
      "defaultValue": null,
      "description": "Maximum number of rows to display when multiline option is set to true.",
      "name": "rowsMax",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string | number"
      }
    },
    "SelectProps": {
      "defaultValue": null,
      "description": "Props applied to the [`Select`](/api/select/) element.",
      "name": "SelectProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<SelectProps>"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
      "name": "type",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "inputVariant": {
      "defaultValue": null,
      "description": "Pass material-ui text field variant down, bypass internal variant prop",
      "name": "inputVariant",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/PureDateInput.tsx",
        "name": "PureDateInputProps"
      },
      "required": false,
      "type": {
        "name": "\"standard\" | \"outlined\" | \"filled\""
      }
    },
    "TextFieldComponent": {
      "defaultValue": null,
      "description": "Override input component",
      "name": "TextFieldComponent",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/PureDateInput.tsx",
        "name": "PureDateInputProps"
      },
      "required": false,
      "type": {
        "name": "ComponentClass<TextFieldProps, any> | FunctionComponent<TextFieldProps>"
      }
    },
    "views": {
      "defaultValue": null,
      "description": "Array of views to show",
      "name": "views",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "DatePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "Array<\"year\" | \"date\" | \"month\">"
      }
    },
    "openTo": {
      "defaultValue": null,
      "description": "First view to show in DatePicker",
      "name": "openTo",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "DatePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "\"date\" | \"year\" | \"month\""
      }
    },
    "minDate": {
      "defaultValue": {
        "value": "Date(1900-01-01)"
      },
      "description": "Min selectable date",
      "name": "minDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "maxDate": {
      "defaultValue": {
        "value": "Date(2100-01-01)"
      },
      "description": "Max selectable date",
      "name": "maxDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "strictCompareDates": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Compare dates by the exact timestamp, instead of start/end of date",
      "name": "strictCompareDates",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disablePast": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Disable past dates",
      "name": "disablePast",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disableFuture": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Disable future dates",
      "name": "disableFuture",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "animateYearScrolling": {
      "defaultValue": {
        "value": "false"
      },
      "description": "To animate scrolling to current year (using scrollIntoView)",
      "name": "animateYearScrolling",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onYearChange": {
      "defaultValue": null,
      "description": "Callback firing on year change",
      "name": "onYearChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void"
      }
    },
    "leftArrowIcon": {
      "defaultValue": null,
      "description": "Left arrow icon",
      "name": "leftArrowIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "rightArrowIcon": {
      "defaultValue": null,
      "description": "Right arrow icon",
      "name": "rightArrowIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "renderDay": {
      "defaultValue": null,
      "description": "Custom renderer for day",
      "name": "renderDay",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(day: DateIOType, selectedDate: DateIOType, dayInCurrentMonth: boolean, dayComponent: Element) => Element"
      }
    },
    "allowKeyboardControl": {
      "defaultValue": {
        "value": "true"
      },
      "description": "Enables keyboard listener for moving between days in calendar",
      "name": "allowKeyboardControl",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "leftArrowButtonProps": {
      "defaultValue": null,
      "description": "Props to pass to left arrow button",
      "name": "leftArrowButtonProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Partial<IconButtonProps>"
      }
    },
    "rightArrowButtonProps": {
      "defaultValue": null,
      "description": "Props to pass to right arrow button",
      "name": "rightArrowButtonProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Partial<IconButtonProps>"
      }
    },
    "shouldDisableDate": {
      "defaultValue": null,
      "description": "Disable specific date",
      "name": "shouldDisableDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(day: DateIOType) => boolean"
      }
    },
    "onMonthChange": {
      "defaultValue": null,
      "description": "Callback firing on month change. Return promise to render spinner till it will not be resolved",
      "name": "onMonthChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void | Promise<void>"
      }
    },
    "loadingIndicator": {
      "defaultValue": null,
      "description": "Custom loading indicator",
      "name": "loadingIndicator",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Element"
      }
    }
  },
  "KeyboardDatePicker": {
    "minDateMessage": {
      "defaultValue": {
        "value": "'Date should not be before minimal date'"
      },
      "description": "Error message, shown if date is less then minimal date",
      "name": "minDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "DateValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "maxDateMessage": {
      "defaultValue": {
        "value": "'Date should not be after maximal date'"
      },
      "description": "Error message, shown if date is more then maximal date",
      "name": "maxDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "DateValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "invalidDateMessage": {
      "defaultValue": {
        "value": "'Invalid Date Format'"
      },
      "description": "Message, appearing when date cannot be parsed",
      "name": "invalidDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "BaseValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "inputValue": {
      "defaultValue": null,
      "description": "String value for controlling value with pure input string. Overrides value prop",
      "name": "inputValue",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/hooks/useKeyboardPickerState.ts",
        "name": "BaseKeyboardPickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "onChange": {
      "defaultValue": null,
      "description": "Keyboard onChange callback",
      "name": "onChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/hooks/useKeyboardPickerState.ts",
        "name": "BaseKeyboardPickerProps"
      },
      "required": true,
      "type": {
        "name": "(date: DateIOType, value?: string | null) => void"
      }
    },
    "open": {
      "defaultValue": null,
      "description": "Controlled picker open state",
      "name": "open",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccept": {
      "defaultValue": null,
      "description": "Callback fired when date is accepted",
      "name": "onAccept",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void"
      }
    },
    "format": {
      "defaultValue": null,
      "description": "Format string",
      "name": "format",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "variant": {
      "defaultValue": {
        "value": "'dialog'"
      },
      "description": "Picker container option",
      "name": "variant",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "\"dialog\" | \"inline\" | \"static\""
      }
    },
    "onError": {
      "defaultValue": null,
      "description": "Callback fired when new error should be displayed\n(!! This is a side effect. Be careful if you want to rerender the component)",
      "name": "onError",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(error: ReactNode, value: DateIOType) => void"
      }
    },
    "value": {
      "defaultValue": null,
      "description": "Picker value",
      "name": "value",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": true,
      "type": {
        "name": "ParsableDate"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disable datepicker and text field\nIf `true`, the `input` element will be disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "autoOk": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Auto accept date on selection",
      "name": "autoOk",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "labelFunc": {
      "defaultValue": null,
      "description": "Dynamic formatter of text field value",
      "name": "labelFunc",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType, invalidLabel: string) => string"
      }
    },
    "initialFocusedDate": {
      "defaultValue": null,
      "description": "Date that will be initially highlighted if null was passed",
      "name": "initialFocusedDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "invalidLabel": {
      "defaultValue": {
        "value": "'unknown'"
      },
      "description": "Message displaying in text field if date is invalid (doesn't work in keyboard mode)",
      "name": "invalidLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "emptyLabel": {
      "defaultValue": {
        "value": "' '"
      },
      "description": "Message displaying in text field, if null passed (doesn't work in keyboard mode)",
      "name": "emptyLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "onOpen": {
      "defaultValue": null,
      "description": "On open callback",
      "name": "onOpen",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onClose": {
      "defaultValue": null,
      "description": "On close callback",
      "name": "onClose",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "disableToolbar": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Hide toolbar and show only date/time views",
      "name": "disableToolbar",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "orientation": {
      "defaultValue": {
        "value": "\"portrait\""
      },
      "description": "Force rendering in particular orientation",
      "name": "orientation",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "\"portrait\" | \"landscape\""
      }
    },
    "ToolbarComponent": {
      "defaultValue": null,
      "description": "Component that will replace default toolbar renderer",
      "name": "ToolbarComponent",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "ComponentClass<ToolbarComponentProps, any> | FunctionComponent<ToolbarComponentProps>"
      }
    },
    "PopoverProps": {
      "defaultValue": null,
      "description": "Popover props passed to material-ui Popover (with variant=\"inline\")",
      "name": "PopoverProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/wrappers/InlineWrapper.tsx",
        "name": "InlineWrapperProps"
      },
      "required": false,
      "type": {
        "name": "Partial<PopoverProps>"
      }
    },
    "label": {
      "defaultValue": null,
      "description": "The label content.",
      "name": "label",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "select": {
      "defaultValue": null,
      "description": "Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\nIf this option is set you must pass the options of the select as children.",
      "name": "select",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "mask": {
      "defaultValue": null,
      "description": "Custom mask. Can be used to override generate from format. (e.g. __/__/____ __:__)",
      "name": "mask",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "defaultValue": {
      "defaultValue": null,
      "description": "The default value of the `input` element.",
      "name": "defaultValue",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "unknown"
      }
    },
    "id": {
      "defaultValue": null,
      "description": "The id of the `input` element.\nUse this prop to make `label` and `helperText` accessible for screen readers.",
      "name": "id",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "placeholder": {
      "defaultValue": null,
      "description": "The short hint displayed in the input before the user enters a value.",
      "name": "placeholder",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "color": {
      "defaultValue": null,
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "name": "color",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"primary\" | \"secondary\""
      }
    },
    "children": {
      "defaultValue": null,
      "description": "@ignore",
      "name": "children",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "error": {
      "defaultValue": null,
      "description": "If `true`, the label will be displayed in an error state.",
      "name": "error",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "fullWidth": {
      "defaultValue": null,
      "description": "If `true`, the input will take up the full width of its container.",
      "name": "fullWidth",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "margin": {
      "defaultValue": null,
      "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
      "name": "margin",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"none\" | \"dense\" | \"normal\""
      }
    },
    "required": {
      "defaultValue": null,
      "description": "If `true`, the label is displayed as required and the `input` element` will be required.",
      "name": "required",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "size": {
      "defaultValue": null,
      "description": "The size of the text field.",
      "name": "size",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"small\" | \"medium\""
      }
    },
    "autoComplete": {
      "defaultValue": null,
      "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
      "name": "autoComplete",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "autoFocus": {
      "defaultValue": null,
      "description": "If `true`, the `input` element will be focused during the first mount.",
      "name": "autoFocus",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "FormHelperTextProps": {
      "defaultValue": null,
      "description": "Props applied to the [`FormHelperText`](/api/form-helper-text/) element.",
      "name": "FormHelperTextProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<OverrideProps<FormHelperTextTypeMap<{}, \"p\">, \"p\">>"
      }
    },
    "helperText": {
      "defaultValue": null,
      "description": "The helper text content.",
      "name": "helperText",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "InputLabelProps": {
      "defaultValue": null,
      "description": "Props applied to the [`InputLabel`](/api/input-label/) element.",
      "name": "InputLabelProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<InputLabelProps>"
      }
    },
    "inputRef": {
      "defaultValue": null,
      "description": "Pass a ref to the `input` element.",
      "name": "inputRef",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "(instance: any) => void"
      }
    },
    "multiline": {
      "defaultValue": null,
      "description": "If `true`, a textarea element will be rendered instead of an input.",
      "name": "multiline",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "name": {
      "defaultValue": null,
      "description": "Name attribute of the `input` element.",
      "name": "name",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "rows": {
      "defaultValue": null,
      "description": "Number of rows to display when multiline option is set to true.",
      "name": "rows",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string | number"
      }
    },
    "rowsMax": {
      "defaultValue": null,
      "description": "Maximum number of rows to display when multiline option is set to true.",
      "name": "rowsMax",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string | number"
      }
    },
    "SelectProps": {
      "defaultValue": null,
      "description": "Props applied to the [`Select`](/api/select/) element.",
      "name": "SelectProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<SelectProps>"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
      "name": "type",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "inputVariant": {
      "defaultValue": null,
      "description": "Pass material-ui text field variant down, bypass internal variant prop",
      "name": "inputVariant",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "\"standard\" | \"outlined\" | \"filled\""
      }
    },
    "TextFieldComponent": {
      "defaultValue": null,
      "description": "Override input component",
      "name": "TextFieldComponent",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "ComponentClass<TextFieldProps, any> | FunctionComponent<TextFieldProps>"
      }
    },
    "keyboardIcon": {
      "defaultValue": null,
      "description": "Icon displaying for open picker button",
      "name": "keyboardIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "maskChar": {
      "defaultValue": {
        "value": "'_'"
      },
      "description": "Char string that will be replaced with number (for \"_\" mask will be \"__/__/____\")",
      "name": "maskChar",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "refuse": {
      "defaultValue": {
        "value": "/[^\\d]+/gi"
      },
      "description": "Refuse values regexp",
      "name": "refuse",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "RegExp"
      }
    },
    "InputAdornmentProps": {
      "defaultValue": null,
      "description": "Props to pass to keyboard input adornment",
      "name": "InputAdornmentProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "Partial<InputAdornmentProps>"
      }
    },
    "KeyboardButtonProps": {
      "defaultValue": null,
      "description": "Props to pass to keyboard adornment button",
      "name": "KeyboardButtonProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "Partial<IconButtonProps>"
      }
    },
    "rifmFormatter": {
      "defaultValue": null,
      "description": "Custom formatter to be passed into Rifm component",
      "name": "rifmFormatter",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "(str: string) => string"
      }
    },
    "views": {
      "defaultValue": null,
      "description": "Array of views to show",
      "name": "views",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "DatePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "Array<\"year\" | \"date\" | \"month\">"
      }
    },
    "openTo": {
      "defaultValue": null,
      "description": "First view to show in DatePicker",
      "name": "openTo",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "DatePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "\"date\" | \"year\" | \"month\""
      }
    },
    "minDate": {
      "defaultValue": {
        "value": "Date(1900-01-01)"
      },
      "description": "Min selectable date",
      "name": "minDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "maxDate": {
      "defaultValue": {
        "value": "Date(2100-01-01)"
      },
      "description": "Max selectable date",
      "name": "maxDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "strictCompareDates": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Compare dates by the exact timestamp, instead of start/end of date",
      "name": "strictCompareDates",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disablePast": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Disable past dates",
      "name": "disablePast",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disableFuture": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Disable future dates",
      "name": "disableFuture",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "animateYearScrolling": {
      "defaultValue": {
        "value": "false"
      },
      "description": "To animate scrolling to current year (using scrollIntoView)",
      "name": "animateYearScrolling",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onYearChange": {
      "defaultValue": null,
      "description": "Callback firing on year change",
      "name": "onYearChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void"
      }
    },
    "leftArrowIcon": {
      "defaultValue": null,
      "description": "Left arrow icon",
      "name": "leftArrowIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "rightArrowIcon": {
      "defaultValue": null,
      "description": "Right arrow icon",
      "name": "rightArrowIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "renderDay": {
      "defaultValue": null,
      "description": "Custom renderer for day",
      "name": "renderDay",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(day: DateIOType, selectedDate: DateIOType, dayInCurrentMonth: boolean, dayComponent: Element) => Element"
      }
    },
    "allowKeyboardControl": {
      "defaultValue": {
        "value": "true"
      },
      "description": "Enables keyboard listener for moving between days in calendar",
      "name": "allowKeyboardControl",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "leftArrowButtonProps": {
      "defaultValue": null,
      "description": "Props to pass to left arrow button",
      "name": "leftArrowButtonProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Partial<IconButtonProps>"
      }
    },
    "rightArrowButtonProps": {
      "defaultValue": null,
      "description": "Props to pass to right arrow button",
      "name": "rightArrowButtonProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Partial<IconButtonProps>"
      }
    },
    "shouldDisableDate": {
      "defaultValue": null,
      "description": "Disable specific date",
      "name": "shouldDisableDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(day: DateIOType) => boolean"
      }
    },
    "onMonthChange": {
      "defaultValue": null,
      "description": "Callback firing on month change. Return promise to render spinner till it will not be resolved",
      "name": "onMonthChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void | Promise<void>"
      }
    },
    "loadingIndicator": {
      "defaultValue": null,
      "description": "Custom loading indicator",
      "name": "loadingIndicator",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Element"
      }
    }
  },
  "TimePicker": {
    "minDateMessage": {
      "defaultValue": {
        "value": "'Date should not be before minimal date'"
      },
      "description": "Error message, shown if date is less then minimal date",
      "name": "minDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "DateValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "maxDateMessage": {
      "defaultValue": {
        "value": "'Date should not be after maximal date'"
      },
      "description": "Error message, shown if date is more then maximal date",
      "name": "maxDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "DateValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "invalidDateMessage": {
      "defaultValue": {
        "value": "'Invalid Date Format'"
      },
      "description": "Message, appearing when date cannot be parsed",
      "name": "invalidDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "BaseValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "value": {
      "defaultValue": null,
      "description": "Picker value",
      "name": "value",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": true,
      "type": {
        "name": "ParsableDate"
      }
    },
    "onChange": {
      "defaultValue": null,
      "description": "onChange callback",
      "name": "onChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": true,
      "type": {
        "name": "(date: DateIOType) => void"
      }
    },
    "autoOk": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Auto accept date on selection",
      "name": "autoOk",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "format": {
      "defaultValue": null,
      "description": "Format string",
      "name": "format",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disable datepicker and text field\nIf `true`, the `input` element will be disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "labelFunc": {
      "defaultValue": null,
      "description": "Dynamic formatter of text field value",
      "name": "labelFunc",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType, invalidLabel: string) => string"
      }
    },
    "initialFocusedDate": {
      "defaultValue": null,
      "description": "Date that will be initially highlighted if null was passed",
      "name": "initialFocusedDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "invalidLabel": {
      "defaultValue": {
        "value": "'unknown'"
      },
      "description": "Message displaying in text field if date is invalid (doesn't work in keyboard mode)",
      "name": "invalidLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "emptyLabel": {
      "defaultValue": {
        "value": "' '"
      },
      "description": "Message displaying in text field, if null passed (doesn't work in keyboard mode)",
      "name": "emptyLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "onAccept": {
      "defaultValue": null,
      "description": "Callback fired when date is accepted",
      "name": "onAccept",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void"
      }
    },
    "onError": {
      "defaultValue": null,
      "description": "Callback fired when new error should be displayed\n(!! This is a side effect. Be careful if you want to rerender the component)",
      "name": "onError",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(error: ReactNode, value: DateIOType) => void"
      }
    },
    "onOpen": {
      "defaultValue": null,
      "description": "On open callback",
      "name": "onOpen",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onClose": {
      "defaultValue": null,
      "description": "On close callback",
      "name": "onClose",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "open": {
      "defaultValue": null,
      "description": "Controlled picker open state",
      "name": "open",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disableToolbar": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Hide toolbar and show only date/time views",
      "name": "disableToolbar",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "orientation": {
      "defaultValue": {
        "value": "\"portrait\""
      },
      "description": "Force rendering in particular orientation",
      "name": "orientation",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "\"portrait\" | \"landscape\""
      }
    },
    "ToolbarComponent": {
      "defaultValue": null,
      "description": "Component that will replace default toolbar renderer",
      "name": "ToolbarComponent",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "ComponentClass<ToolbarComponentProps, any> | FunctionComponent<ToolbarComponentProps>"
      }
    },
    "variant": {
      "defaultValue": {
        "value": "'dialog'"
      },
      "description": "Picker container option",
      "name": "variant",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "\"dialog\" | \"inline\" | \"static\""
      }
    },
    "PopoverProps": {
      "defaultValue": null,
      "description": "Popover props passed to material-ui Popover (with variant=\"inline\")",
      "name": "PopoverProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/wrappers/InlineWrapper.tsx",
        "name": "InlineWrapperProps"
      },
      "required": false,
      "type": {
        "name": "Partial<PopoverProps>"
      }
    },
    "label": {
      "defaultValue": null,
      "description": "The label content.",
      "name": "label",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "select": {
      "defaultValue": null,
      "description": "Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\nIf this option is set you must pass the options of the select as children.",
      "name": "select",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "defaultValue": {
      "defaultValue": null,
      "description": "The default value of the `input` element.",
      "name": "defaultValue",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "unknown"
      }
    },
    "id": {
      "defaultValue": null,
      "description": "The id of the `input` element.\nUse this prop to make `label` and `helperText` accessible for screen readers.",
      "name": "id",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "placeholder": {
      "defaultValue": null,
      "description": "The short hint displayed in the input before the user enters a value.",
      "name": "placeholder",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "color": {
      "defaultValue": null,
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "name": "color",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"primary\" | \"secondary\""
      }
    },
    "children": {
      "defaultValue": null,
      "description": "@ignore",
      "name": "children",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "error": {
      "defaultValue": null,
      "description": "If `true`, the label will be displayed in an error state.",
      "name": "error",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "fullWidth": {
      "defaultValue": null,
      "description": "If `true`, the input will take up the full width of its container.",
      "name": "fullWidth",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "margin": {
      "defaultValue": null,
      "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
      "name": "margin",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"none\" | \"dense\" | \"normal\""
      }
    },
    "required": {
      "defaultValue": null,
      "description": "If `true`, the label is displayed as required and the `input` element` will be required.",
      "name": "required",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "size": {
      "defaultValue": null,
      "description": "The size of the text field.",
      "name": "size",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"small\" | \"medium\""
      }
    },
    "autoComplete": {
      "defaultValue": null,
      "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
      "name": "autoComplete",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "autoFocus": {
      "defaultValue": null,
      "description": "If `true`, the `input` element will be focused during the first mount.",
      "name": "autoFocus",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "FormHelperTextProps": {
      "defaultValue": null,
      "description": "Props applied to the [`FormHelperText`](/api/form-helper-text/) element.",
      "name": "FormHelperTextProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<OverrideProps<FormHelperTextTypeMap<{}, \"p\">, \"p\">>"
      }
    },
    "helperText": {
      "defaultValue": null,
      "description": "The helper text content.",
      "name": "helperText",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "InputLabelProps": {
      "defaultValue": null,
      "description": "Props applied to the [`InputLabel`](/api/input-label/) element.",
      "name": "InputLabelProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<InputLabelProps>"
      }
    },
    "inputRef": {
      "defaultValue": null,
      "description": "Pass a ref to the `input` element.",
      "name": "inputRef",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "(instance: any) => void"
      }
    },
    "multiline": {
      "defaultValue": null,
      "description": "If `true`, a textarea element will be rendered instead of an input.",
      "name": "multiline",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "name": {
      "defaultValue": null,
      "description": "Name attribute of the `input` element.",
      "name": "name",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "rows": {
      "defaultValue": null,
      "description": "Number of rows to display when multiline option is set to true.",
      "name": "rows",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string | number"
      }
    },
    "rowsMax": {
      "defaultValue": null,
      "description": "Maximum number of rows to display when multiline option is set to true.",
      "name": "rowsMax",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string | number"
      }
    },
    "SelectProps": {
      "defaultValue": null,
      "description": "Props applied to the [`Select`](/api/select/) element.",
      "name": "SelectProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<SelectProps>"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
      "name": "type",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "inputVariant": {
      "defaultValue": null,
      "description": "Pass material-ui text field variant down, bypass internal variant prop",
      "name": "inputVariant",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/PureDateInput.tsx",
        "name": "PureDateInputProps"
      },
      "required": false,
      "type": {
        "name": "\"standard\" | \"outlined\" | \"filled\""
      }
    },
    "TextFieldComponent": {
      "defaultValue": null,
      "description": "Override input component",
      "name": "TextFieldComponent",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/PureDateInput.tsx",
        "name": "PureDateInputProps"
      },
      "required": false,
      "type": {
        "name": "ComponentClass<TextFieldProps, any> | FunctionComponent<TextFieldProps>"
      }
    },
    "views": {
      "defaultValue": null,
      "description": "Array of views to show",
      "name": "views",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/TimePicker/TimePicker.tsx",
        "name": "TimePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "(\"hours\" | \"minutes\" | \"seconds\")[]"
      }
    },
    "openTo": {
      "defaultValue": null,
      "description": "First view to show in timepicker",
      "name": "openTo",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/TimePicker/TimePicker.tsx",
        "name": "TimePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "\"hours\" | \"minutes\" | \"seconds\""
      }
    },
    "ampm": {
      "defaultValue": {
        "value": "true"
      },
      "description": "12h/24h view for hour selection clock",
      "name": "ampm",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/TimePicker/TimePicker.tsx",
        "name": "BaseTimePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "minutesStep": {
      "defaultValue": {
        "value": "1"
      },
      "description": "Step over minutes",
      "name": "minutesStep",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/TimePicker/TimePicker.tsx",
        "name": "BaseTimePickerProps"
      },
      "required": false,
      "type": {
        "name": "number"
      }
    }
  },
  "KeyboardTimePicker": {
    "minDateMessage": {
      "defaultValue": {
        "value": "'Date should not be before minimal date'"
      },
      "description": "Error message, shown if date is less then minimal date",
      "name": "minDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "DateValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "maxDateMessage": {
      "defaultValue": {
        "value": "'Date should not be after maximal date'"
      },
      "description": "Error message, shown if date is more then maximal date",
      "name": "maxDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "DateValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "invalidDateMessage": {
      "defaultValue": {
        "value": "'Invalid Date Format'"
      },
      "description": "Message, appearing when date cannot be parsed",
      "name": "invalidDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "BaseValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "inputValue": {
      "defaultValue": null,
      "description": "String value for controlling value with pure input string. Overrides value prop",
      "name": "inputValue",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/hooks/useKeyboardPickerState.ts",
        "name": "BaseKeyboardPickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "onChange": {
      "defaultValue": null,
      "description": "Keyboard onChange callback",
      "name": "onChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/hooks/useKeyboardPickerState.ts",
        "name": "BaseKeyboardPickerProps"
      },
      "required": true,
      "type": {
        "name": "(date: DateIOType, value?: string | null) => void"
      }
    },
    "open": {
      "defaultValue": null,
      "description": "Controlled picker open state",
      "name": "open",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccept": {
      "defaultValue": null,
      "description": "Callback fired when date is accepted",
      "name": "onAccept",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void"
      }
    },
    "format": {
      "defaultValue": null,
      "description": "Format string",
      "name": "format",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "variant": {
      "defaultValue": {
        "value": "'dialog'"
      },
      "description": "Picker container option",
      "name": "variant",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "\"dialog\" | \"inline\" | \"static\""
      }
    },
    "onError": {
      "defaultValue": null,
      "description": "Callback fired when new error should be displayed\n(!! This is a side effect. Be careful if you want to rerender the component)",
      "name": "onError",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(error: ReactNode, value: DateIOType) => void"
      }
    },
    "value": {
      "defaultValue": null,
      "description": "Picker value",
      "name": "value",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": true,
      "type": {
        "name": "ParsableDate"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disable datepicker and text field\nIf `true`, the `input` element will be disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onClose": {
      "defaultValue": null,
      "description": "On close callback",
      "name": "onClose",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "autoOk": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Auto accept date on selection",
      "name": "autoOk",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "labelFunc": {
      "defaultValue": null,
      "description": "Dynamic formatter of text field value",
      "name": "labelFunc",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType, invalidLabel: string) => string"
      }
    },
    "initialFocusedDate": {
      "defaultValue": null,
      "description": "Date that will be initially highlighted if null was passed",
      "name": "initialFocusedDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "invalidLabel": {
      "defaultValue": {
        "value": "'unknown'"
      },
      "description": "Message displaying in text field if date is invalid (doesn't work in keyboard mode)",
      "name": "invalidLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "emptyLabel": {
      "defaultValue": {
        "value": "' '"
      },
      "description": "Message displaying in text field, if null passed (doesn't work in keyboard mode)",
      "name": "emptyLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "onOpen": {
      "defaultValue": null,
      "description": "On open callback",
      "name": "onOpen",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "disableToolbar": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Hide toolbar and show only date/time views",
      "name": "disableToolbar",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "orientation": {
      "defaultValue": {
        "value": "\"portrait\""
      },
      "description": "Force rendering in particular orientation",
      "name": "orientation",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "\"portrait\" | \"landscape\""
      }
    },
    "ToolbarComponent": {
      "defaultValue": null,
      "description": "Component that will replace default toolbar renderer",
      "name": "ToolbarComponent",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "ComponentClass<ToolbarComponentProps, any> | FunctionComponent<ToolbarComponentProps>"
      }
    },
    "PopoverProps": {
      "defaultValue": null,
      "description": "Popover props passed to material-ui Popover (with variant=\"inline\")",
      "name": "PopoverProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/wrappers/InlineWrapper.tsx",
        "name": "InlineWrapperProps"
      },
      "required": false,
      "type": {
        "name": "Partial<PopoverProps>"
      }
    },
    "label": {
      "defaultValue": null,
      "description": "The label content.",
      "name": "label",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "select": {
      "defaultValue": null,
      "description": "Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\nIf this option is set you must pass the options of the select as children.",
      "name": "select",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "mask": {
      "defaultValue": null,
      "description": "Custom mask. Can be used to override generate from format. (e.g. __/__/____ __:__)",
      "name": "mask",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "defaultValue": {
      "defaultValue": null,
      "description": "The default value of the `input` element.",
      "name": "defaultValue",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "unknown"
      }
    },
    "id": {
      "defaultValue": null,
      "description": "The id of the `input` element.\nUse this prop to make `label` and `helperText` accessible for screen readers.",
      "name": "id",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "placeholder": {
      "defaultValue": null,
      "description": "The short hint displayed in the input before the user enters a value.",
      "name": "placeholder",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "color": {
      "defaultValue": null,
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "name": "color",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"primary\" | \"secondary\""
      }
    },
    "children": {
      "defaultValue": null,
      "description": "@ignore",
      "name": "children",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "error": {
      "defaultValue": null,
      "description": "If `true`, the label will be displayed in an error state.",
      "name": "error",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "fullWidth": {
      "defaultValue": null,
      "description": "If `true`, the input will take up the full width of its container.",
      "name": "fullWidth",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "margin": {
      "defaultValue": null,
      "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
      "name": "margin",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"none\" | \"dense\" | \"normal\""
      }
    },
    "required": {
      "defaultValue": null,
      "description": "If `true`, the label is displayed as required and the `input` element` will be required.",
      "name": "required",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "size": {
      "defaultValue": null,
      "description": "The size of the text field.",
      "name": "size",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"small\" | \"medium\""
      }
    },
    "autoComplete": {
      "defaultValue": null,
      "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
      "name": "autoComplete",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "autoFocus": {
      "defaultValue": null,
      "description": "If `true`, the `input` element will be focused during the first mount.",
      "name": "autoFocus",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "FormHelperTextProps": {
      "defaultValue": null,
      "description": "Props applied to the [`FormHelperText`](/api/form-helper-text/) element.",
      "name": "FormHelperTextProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<OverrideProps<FormHelperTextTypeMap<{}, \"p\">, \"p\">>"
      }
    },
    "helperText": {
      "defaultValue": null,
      "description": "The helper text content.",
      "name": "helperText",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "InputLabelProps": {
      "defaultValue": null,
      "description": "Props applied to the [`InputLabel`](/api/input-label/) element.",
      "name": "InputLabelProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<InputLabelProps>"
      }
    },
    "inputRef": {
      "defaultValue": null,
      "description": "Pass a ref to the `input` element.",
      "name": "inputRef",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "(instance: any) => void"
      }
    },
    "multiline": {
      "defaultValue": null,
      "description": "If `true`, a textarea element will be rendered instead of an input.",
      "name": "multiline",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "name": {
      "defaultValue": null,
      "description": "Name attribute of the `input` element.",
      "name": "name",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "rows": {
      "defaultValue": null,
      "description": "Number of rows to display when multiline option is set to true.",
      "name": "rows",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string | number"
      }
    },
    "rowsMax": {
      "defaultValue": null,
      "description": "Maximum number of rows to display when multiline option is set to true.",
      "name": "rowsMax",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string | number"
      }
    },
    "SelectProps": {
      "defaultValue": null,
      "description": "Props applied to the [`Select`](/api/select/) element.",
      "name": "SelectProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<SelectProps>"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
      "name": "type",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "inputVariant": {
      "defaultValue": null,
      "description": "Pass material-ui text field variant down, bypass internal variant prop",
      "name": "inputVariant",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "\"standard\" | \"outlined\" | \"filled\""
      }
    },
    "TextFieldComponent": {
      "defaultValue": null,
      "description": "Override input component",
      "name": "TextFieldComponent",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "ComponentClass<TextFieldProps, any> | FunctionComponent<TextFieldProps>"
      }
    },
    "keyboardIcon": {
      "defaultValue": null,
      "description": "Icon displaying for open picker button",
      "name": "keyboardIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "maskChar": {
      "defaultValue": {
        "value": "'_'"
      },
      "description": "Char string that will be replaced with number (for \"_\" mask will be \"__/__/____\")",
      "name": "maskChar",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "refuse": {
      "defaultValue": {
        "value": "/[^\\d]+/gi"
      },
      "description": "Refuse values regexp",
      "name": "refuse",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "RegExp"
      }
    },
    "InputAdornmentProps": {
      "defaultValue": null,
      "description": "Props to pass to keyboard input adornment",
      "name": "InputAdornmentProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "Partial<InputAdornmentProps>"
      }
    },
    "KeyboardButtonProps": {
      "defaultValue": null,
      "description": "Props to pass to keyboard adornment button",
      "name": "KeyboardButtonProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "Partial<IconButtonProps>"
      }
    },
    "rifmFormatter": {
      "defaultValue": null,
      "description": "Custom formatter to be passed into Rifm component",
      "name": "rifmFormatter",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "(str: string) => string"
      }
    },
    "views": {
      "defaultValue": null,
      "description": "Array of views to show",
      "name": "views",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/TimePicker/TimePicker.tsx",
        "name": "TimePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "(\"hours\" | \"minutes\" | \"seconds\")[]"
      }
    },
    "openTo": {
      "defaultValue": null,
      "description": "First view to show in timepicker",
      "name": "openTo",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/TimePicker/TimePicker.tsx",
        "name": "TimePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "\"hours\" | \"minutes\" | \"seconds\""
      }
    },
    "ampm": {
      "defaultValue": {
        "value": "true"
      },
      "description": "12h/24h view for hour selection clock",
      "name": "ampm",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/TimePicker/TimePicker.tsx",
        "name": "BaseTimePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "minutesStep": {
      "defaultValue": {
        "value": "1"
      },
      "description": "Step over minutes",
      "name": "minutesStep",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/TimePicker/TimePicker.tsx",
        "name": "BaseTimePickerProps"
      },
      "required": false,
      "type": {
        "name": "number"
      }
    }
  },
  "DateTimePicker": {
    "minDateMessage": {
      "defaultValue": {
        "value": "'Date should not be before minimal date'"
      },
      "description": "Error message, shown if date is less then minimal date",
      "name": "minDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "DateValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "maxDateMessage": {
      "defaultValue": {
        "value": "'Date should not be after maximal date'"
      },
      "description": "Error message, shown if date is more then maximal date",
      "name": "maxDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "DateValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "invalidDateMessage": {
      "defaultValue": {
        "value": "'Invalid Date Format'"
      },
      "description": "Message, appearing when date cannot be parsed",
      "name": "invalidDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "BaseValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "value": {
      "defaultValue": null,
      "description": "Picker value",
      "name": "value",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": true,
      "type": {
        "name": "ParsableDate"
      }
    },
    "onChange": {
      "defaultValue": null,
      "description": "onChange callback",
      "name": "onChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": true,
      "type": {
        "name": "(date: DateIOType) => void"
      }
    },
    "autoOk": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Auto accept date on selection",
      "name": "autoOk",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "format": {
      "defaultValue": null,
      "description": "Format string",
      "name": "format",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disable datepicker and text field\nIf `true`, the `input` element will be disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "labelFunc": {
      "defaultValue": null,
      "description": "Dynamic formatter of text field value",
      "name": "labelFunc",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType, invalidLabel: string) => string"
      }
    },
    "initialFocusedDate": {
      "defaultValue": null,
      "description": "Date that will be initially highlighted if null was passed",
      "name": "initialFocusedDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "invalidLabel": {
      "defaultValue": {
        "value": "'unknown'"
      },
      "description": "Message displaying in text field if date is invalid (doesn't work in keyboard mode)",
      "name": "invalidLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "emptyLabel": {
      "defaultValue": {
        "value": "' '"
      },
      "description": "Message displaying in text field, if null passed (doesn't work in keyboard mode)",
      "name": "emptyLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "onAccept": {
      "defaultValue": null,
      "description": "Callback fired when date is accepted",
      "name": "onAccept",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void"
      }
    },
    "onError": {
      "defaultValue": null,
      "description": "Callback fired when new error should be displayed\n(!! This is a side effect. Be careful if you want to rerender the component)",
      "name": "onError",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(error: ReactNode, value: DateIOType) => void"
      }
    },
    "onOpen": {
      "defaultValue": null,
      "description": "On open callback",
      "name": "onOpen",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onClose": {
      "defaultValue": null,
      "description": "On close callback",
      "name": "onClose",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "open": {
      "defaultValue": null,
      "description": "Controlled picker open state",
      "name": "open",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disableToolbar": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Hide toolbar and show only date/time views",
      "name": "disableToolbar",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "orientation": {
      "defaultValue": {
        "value": "\"portrait\""
      },
      "description": "Force rendering in particular orientation",
      "name": "orientation",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "\"portrait\" | \"landscape\""
      }
    },
    "ToolbarComponent": {
      "defaultValue": null,
      "description": "Component that will replace default toolbar renderer",
      "name": "ToolbarComponent",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "ComponentClass<ToolbarComponentProps, any> | FunctionComponent<ToolbarComponentProps>"
      }
    },
    "variant": {
      "defaultValue": {
        "value": "'dialog'"
      },
      "description": "Picker container option",
      "name": "variant",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "\"dialog\" | \"inline\" | \"static\""
      }
    },
    "PopoverProps": {
      "defaultValue": null,
      "description": "Popover props passed to material-ui Popover (with variant=\"inline\")",
      "name": "PopoverProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/wrappers/InlineWrapper.tsx",
        "name": "InlineWrapperProps"
      },
      "required": false,
      "type": {
        "name": "Partial<PopoverProps>"
      }
    },
    "label": {
      "defaultValue": null,
      "description": "The label content.",
      "name": "label",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "select": {
      "defaultValue": null,
      "description": "Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\nIf this option is set you must pass the options of the select as children.",
      "name": "select",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "defaultValue": {
      "defaultValue": null,
      "description": "The default value of the `input` element.",
      "name": "defaultValue",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "unknown"
      }
    },
    "id": {
      "defaultValue": null,
      "description": "The id of the `input` element.\nUse this prop to make `label` and `helperText` accessible for screen readers.",
      "name": "id",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "placeholder": {
      "defaultValue": null,
      "description": "The short hint displayed in the input before the user enters a value.",
      "name": "placeholder",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "color": {
      "defaultValue": null,
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "name": "color",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"primary\" | \"secondary\""
      }
    },
    "children": {
      "defaultValue": null,
      "description": "@ignore",
      "name": "children",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "error": {
      "defaultValue": null,
      "description": "If `true`, the label will be displayed in an error state.",
      "name": "error",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "fullWidth": {
      "defaultValue": null,
      "description": "If `true`, the input will take up the full width of its container.",
      "name": "fullWidth",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "margin": {
      "defaultValue": null,
      "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
      "name": "margin",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"none\" | \"dense\" | \"normal\""
      }
    },
    "required": {
      "defaultValue": null,
      "description": "If `true`, the label is displayed as required and the `input` element` will be required.",
      "name": "required",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "size": {
      "defaultValue": null,
      "description": "The size of the text field.",
      "name": "size",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"small\" | \"medium\""
      }
    },
    "autoComplete": {
      "defaultValue": null,
      "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
      "name": "autoComplete",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "autoFocus": {
      "defaultValue": null,
      "description": "If `true`, the `input` element will be focused during the first mount.",
      "name": "autoFocus",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "FormHelperTextProps": {
      "defaultValue": null,
      "description": "Props applied to the [`FormHelperText`](/api/form-helper-text/) element.",
      "name": "FormHelperTextProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<OverrideProps<FormHelperTextTypeMap<{}, \"p\">, \"p\">>"
      }
    },
    "helperText": {
      "defaultValue": null,
      "description": "The helper text content.",
      "name": "helperText",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "InputLabelProps": {
      "defaultValue": null,
      "description": "Props applied to the [`InputLabel`](/api/input-label/) element.",
      "name": "InputLabelProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<InputLabelProps>"
      }
    },
    "inputRef": {
      "defaultValue": null,
      "description": "Pass a ref to the `input` element.",
      "name": "inputRef",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "(instance: any) => void"
      }
    },
    "multiline": {
      "defaultValue": null,
      "description": "If `true`, a textarea element will be rendered instead of an input.",
      "name": "multiline",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "name": {
      "defaultValue": null,
      "description": "Name attribute of the `input` element.",
      "name": "name",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "rows": {
      "defaultValue": null,
      "description": "Number of rows to display when multiline option is set to true.",
      "name": "rows",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string | number"
      }
    },
    "rowsMax": {
      "defaultValue": null,
      "description": "Maximum number of rows to display when multiline option is set to true.",
      "name": "rowsMax",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string | number"
      }
    },
    "SelectProps": {
      "defaultValue": null,
      "description": "Props applied to the [`Select`](/api/select/) element.",
      "name": "SelectProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<SelectProps>"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
      "name": "type",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "inputVariant": {
      "defaultValue": null,
      "description": "Pass material-ui text field variant down, bypass internal variant prop",
      "name": "inputVariant",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/PureDateInput.tsx",
        "name": "PureDateInputProps"
      },
      "required": false,
      "type": {
        "name": "\"standard\" | \"outlined\" | \"filled\""
      }
    },
    "TextFieldComponent": {
      "defaultValue": null,
      "description": "Override input component",
      "name": "TextFieldComponent",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/PureDateInput.tsx",
        "name": "PureDateInputProps"
      },
      "required": false,
      "type": {
        "name": "ComponentClass<TextFieldProps, any> | FunctionComponent<TextFieldProps>"
      }
    },
    "views": {
      "defaultValue": null,
      "description": "Array of views to show",
      "name": "views",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DateTimePicker/DateTimePicker.tsx",
        "name": "DateTimePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "(\"date\" | \"year\" | \"month\" | \"hours\" | \"minutes\")[]"
      }
    },
    "openTo": {
      "defaultValue": null,
      "description": "First view to show in DatePicker",
      "name": "openTo",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DateTimePicker/DateTimePicker.tsx",
        "name": "DateTimePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "\"date\" | \"year\" | \"month\" | \"hours\" | \"minutes\""
      }
    },
    "hideTabs": {
      "defaultValue": null,
      "description": "To show tabs",
      "name": "hideTabs",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DateTimePicker/DateTimePicker.tsx",
        "name": "DateTimePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "dateRangeIcon": {
      "defaultValue": null,
      "description": "Date tab icon",
      "name": "dateRangeIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DateTimePicker/DateTimePicker.tsx",
        "name": "DateTimePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "timeIcon": {
      "defaultValue": null,
      "description": "Time tab icon",
      "name": "timeIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DateTimePicker/DateTimePicker.tsx",
        "name": "DateTimePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "ampm": {
      "defaultValue": {
        "value": "true"
      },
      "description": "12h/24h view for hour selection clock",
      "name": "ampm",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/TimePicker/TimePicker.tsx",
        "name": "BaseTimePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "minutesStep": {
      "defaultValue": {
        "value": "1"
      },
      "description": "Step over minutes",
      "name": "minutesStep",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/TimePicker/TimePicker.tsx",
        "name": "BaseTimePickerProps"
      },
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "minDate": {
      "defaultValue": {
        "value": "Date(1900-01-01)"
      },
      "description": "Min selectable date",
      "name": "minDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "maxDate": {
      "defaultValue": {
        "value": "Date(2100-01-01)"
      },
      "description": "Max selectable date",
      "name": "maxDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "strictCompareDates": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Compare dates by the exact timestamp, instead of start/end of date",
      "name": "strictCompareDates",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disablePast": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Disable past dates",
      "name": "disablePast",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disableFuture": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Disable future dates",
      "name": "disableFuture",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "animateYearScrolling": {
      "defaultValue": {
        "value": "false"
      },
      "description": "To animate scrolling to current year (using scrollIntoView)",
      "name": "animateYearScrolling",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onYearChange": {
      "defaultValue": null,
      "description": "Callback firing on year change",
      "name": "onYearChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void"
      }
    },
    "leftArrowIcon": {
      "defaultValue": null,
      "description": "Left arrow icon",
      "name": "leftArrowIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "rightArrowIcon": {
      "defaultValue": null,
      "description": "Right arrow icon",
      "name": "rightArrowIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "renderDay": {
      "defaultValue": null,
      "description": "Custom renderer for day",
      "name": "renderDay",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(day: DateIOType, selectedDate: DateIOType, dayInCurrentMonth: boolean, dayComponent: Element) => Element"
      }
    },
    "allowKeyboardControl": {
      "defaultValue": {
        "value": "true"
      },
      "description": "Enables keyboard listener for moving between days in calendar",
      "name": "allowKeyboardControl",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "leftArrowButtonProps": {
      "defaultValue": null,
      "description": "Props to pass to left arrow button",
      "name": "leftArrowButtonProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Partial<IconButtonProps>"
      }
    },
    "rightArrowButtonProps": {
      "defaultValue": null,
      "description": "Props to pass to right arrow button",
      "name": "rightArrowButtonProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Partial<IconButtonProps>"
      }
    },
    "shouldDisableDate": {
      "defaultValue": null,
      "description": "Disable specific date",
      "name": "shouldDisableDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(day: DateIOType) => boolean"
      }
    },
    "onMonthChange": {
      "defaultValue": null,
      "description": "Callback firing on month change. Return promise to render spinner till it will not be resolved",
      "name": "onMonthChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void | Promise<void>"
      }
    },
    "loadingIndicator": {
      "defaultValue": null,
      "description": "Custom loading indicator",
      "name": "loadingIndicator",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Element"
      }
    }
  },
  "KeyboardDateTimePicker": {
    "minDateMessage": {
      "defaultValue": {
        "value": "'Date should not be before minimal date'"
      },
      "description": "Error message, shown if date is less then minimal date",
      "name": "minDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "DateValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "maxDateMessage": {
      "defaultValue": {
        "value": "'Date should not be after maximal date'"
      },
      "description": "Error message, shown if date is more then maximal date",
      "name": "maxDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "DateValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "invalidDateMessage": {
      "defaultValue": {
        "value": "'Invalid Date Format'"
      },
      "description": "Message, appearing when date cannot be parsed",
      "name": "invalidDateMessage",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_helpers/text-field-helper.ts",
        "name": "BaseValidationProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "inputValue": {
      "defaultValue": null,
      "description": "String value for controlling value with pure input string. Overrides value prop",
      "name": "inputValue",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/hooks/useKeyboardPickerState.ts",
        "name": "BaseKeyboardPickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "onChange": {
      "defaultValue": null,
      "description": "Keyboard onChange callback",
      "name": "onChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/hooks/useKeyboardPickerState.ts",
        "name": "BaseKeyboardPickerProps"
      },
      "required": true,
      "type": {
        "name": "(date: DateIOType, value?: string | null) => void"
      }
    },
    "open": {
      "defaultValue": null,
      "description": "Controlled picker open state",
      "name": "open",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccept": {
      "defaultValue": null,
      "description": "Callback fired when date is accepted",
      "name": "onAccept",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void"
      }
    },
    "format": {
      "defaultValue": null,
      "description": "Format string",
      "name": "format",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "variant": {
      "defaultValue": {
        "value": "'dialog'"
      },
      "description": "Picker container option",
      "name": "variant",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "\"dialog\" | \"inline\" | \"static\""
      }
    },
    "onError": {
      "defaultValue": null,
      "description": "Callback fired when new error should be displayed\n(!! This is a side effect. Be careful if you want to rerender the component)",
      "name": "onError",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(error: ReactNode, value: DateIOType) => void"
      }
    },
    "value": {
      "defaultValue": null,
      "description": "Picker value",
      "name": "value",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": true,
      "type": {
        "name": "ParsableDate"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disable datepicker and text field\nIf `true`, the `input` element will be disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onClose": {
      "defaultValue": null,
      "description": "On close callback",
      "name": "onClose",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "autoOk": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Auto accept date on selection",
      "name": "autoOk",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "labelFunc": {
      "defaultValue": null,
      "description": "Dynamic formatter of text field value",
      "name": "labelFunc",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType, invalidLabel: string) => string"
      }
    },
    "initialFocusedDate": {
      "defaultValue": null,
      "description": "Date that will be initially highlighted if null was passed",
      "name": "initialFocusedDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "invalidLabel": {
      "defaultValue": {
        "value": "'unknown'"
      },
      "description": "Message displaying in text field if date is invalid (doesn't work in keyboard mode)",
      "name": "invalidLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "emptyLabel": {
      "defaultValue": {
        "value": "' '"
      },
      "description": "Message displaying in text field, if null passed (doesn't work in keyboard mode)",
      "name": "emptyLabel",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "onOpen": {
      "defaultValue": null,
      "description": "On open callback",
      "name": "onOpen",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "disableToolbar": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Hide toolbar and show only date/time views",
      "name": "disableToolbar",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "orientation": {
      "defaultValue": {
        "value": "\"portrait\""
      },
      "description": "Force rendering in particular orientation",
      "name": "orientation",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "\"portrait\" | \"landscape\""
      }
    },
    "ToolbarComponent": {
      "defaultValue": null,
      "description": "Component that will replace default toolbar renderer",
      "name": "ToolbarComponent",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/typings/BasePicker.tsx",
        "name": "BasePickerProps"
      },
      "required": false,
      "type": {
        "name": "ComponentClass<ToolbarComponentProps, any> | FunctionComponent<ToolbarComponentProps>"
      }
    },
    "PopoverProps": {
      "defaultValue": null,
      "description": "Popover props passed to material-ui Popover (with variant=\"inline\")",
      "name": "PopoverProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/wrappers/InlineWrapper.tsx",
        "name": "InlineWrapperProps"
      },
      "required": false,
      "type": {
        "name": "Partial<PopoverProps>"
      }
    },
    "label": {
      "defaultValue": null,
      "description": "The label content.",
      "name": "label",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "select": {
      "defaultValue": null,
      "description": "Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\nIf this option is set you must pass the options of the select as children.",
      "name": "select",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "mask": {
      "defaultValue": null,
      "description": "Custom mask. Can be used to override generate from format. (e.g. __/__/____ __:__)",
      "name": "mask",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "defaultValue": {
      "defaultValue": null,
      "description": "The default value of the `input` element.",
      "name": "defaultValue",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "unknown"
      }
    },
    "id": {
      "defaultValue": null,
      "description": "The id of the `input` element.\nUse this prop to make `label` and `helperText` accessible for screen readers.",
      "name": "id",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "placeholder": {
      "defaultValue": null,
      "description": "The short hint displayed in the input before the user enters a value.",
      "name": "placeholder",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "color": {
      "defaultValue": null,
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "name": "color",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"primary\" | \"secondary\""
      }
    },
    "children": {
      "defaultValue": null,
      "description": "@ignore",
      "name": "children",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "error": {
      "defaultValue": null,
      "description": "If `true`, the label will be displayed in an error state.",
      "name": "error",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "fullWidth": {
      "defaultValue": null,
      "description": "If `true`, the input will take up the full width of its container.",
      "name": "fullWidth",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "margin": {
      "defaultValue": null,
      "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
      "name": "margin",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"none\" | \"dense\" | \"normal\""
      }
    },
    "required": {
      "defaultValue": null,
      "description": "If `true`, the label is displayed as required and the `input` element` will be required.",
      "name": "required",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "size": {
      "defaultValue": null,
      "description": "The size of the text field.",
      "name": "size",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "\"small\" | \"medium\""
      }
    },
    "autoComplete": {
      "defaultValue": null,
      "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
      "name": "autoComplete",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "autoFocus": {
      "defaultValue": null,
      "description": "If `true`, the `input` element will be focused during the first mount.",
      "name": "autoFocus",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "FormHelperTextProps": {
      "defaultValue": null,
      "description": "Props applied to the [`FormHelperText`](/api/form-helper-text/) element.",
      "name": "FormHelperTextProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<OverrideProps<FormHelperTextTypeMap<{}, \"p\">, \"p\">>"
      }
    },
    "helperText": {
      "defaultValue": null,
      "description": "The helper text content.",
      "name": "helperText",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "InputLabelProps": {
      "defaultValue": null,
      "description": "Props applied to the [`InputLabel`](/api/input-label/) element.",
      "name": "InputLabelProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<InputLabelProps>"
      }
    },
    "inputRef": {
      "defaultValue": null,
      "description": "Pass a ref to the `input` element.",
      "name": "inputRef",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "(instance: any) => void"
      }
    },
    "multiline": {
      "defaultValue": null,
      "description": "If `true`, a textarea element will be rendered instead of an input.",
      "name": "multiline",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "name": {
      "defaultValue": null,
      "description": "Name attribute of the `input` element.",
      "name": "name",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "rows": {
      "defaultValue": null,
      "description": "Number of rows to display when multiline option is set to true.",
      "name": "rows",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string | number"
      }
    },
    "rowsMax": {
      "defaultValue": null,
      "description": "Maximum number of rows to display when multiline option is set to true.",
      "name": "rowsMax",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string | number"
      }
    },
    "SelectProps": {
      "defaultValue": null,
      "description": "Props applied to the [`Select`](/api/select/) element.",
      "name": "SelectProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "Partial<SelectProps>"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
      "name": "type",
      "parent": {
        "fileName": "material-ui-pickers-roc/node_modules/@material-ui/core/TextField/TextField.d.ts",
        "name": "BaseTextFieldProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "inputVariant": {
      "defaultValue": null,
      "description": "Pass material-ui text field variant down, bypass internal variant prop",
      "name": "inputVariant",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "\"standard\" | \"outlined\" | \"filled\""
      }
    },
    "TextFieldComponent": {
      "defaultValue": null,
      "description": "Override input component",
      "name": "TextFieldComponent",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "ComponentClass<TextFieldProps, any> | FunctionComponent<TextFieldProps>"
      }
    },
    "keyboardIcon": {
      "defaultValue": null,
      "description": "Icon displaying for open picker button",
      "name": "keyboardIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "maskChar": {
      "defaultValue": {
        "value": "'_'"
      },
      "description": "Char string that will be replaced with number (for \"_\" mask will be \"__/__/____\")",
      "name": "maskChar",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "refuse": {
      "defaultValue": {
        "value": "/[^\\d]+/gi"
      },
      "description": "Refuse values regexp",
      "name": "refuse",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "RegExp"
      }
    },
    "InputAdornmentProps": {
      "defaultValue": null,
      "description": "Props to pass to keyboard input adornment",
      "name": "InputAdornmentProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "Partial<InputAdornmentProps>"
      }
    },
    "KeyboardButtonProps": {
      "defaultValue": null,
      "description": "Props to pass to keyboard adornment button",
      "name": "KeyboardButtonProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "Partial<IconButtonProps>"
      }
    },
    "rifmFormatter": {
      "defaultValue": null,
      "description": "Custom formatter to be passed into Rifm component",
      "name": "rifmFormatter",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/_shared/KeyboardDateInput.tsx",
        "name": "KeyboardDateInputProps"
      },
      "required": false,
      "type": {
        "name": "(str: string) => string"
      }
    },
    "views": {
      "defaultValue": null,
      "description": "Array of views to show",
      "name": "views",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DateTimePicker/DateTimePicker.tsx",
        "name": "DateTimePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "(\"date\" | \"year\" | \"month\" | \"hours\" | \"minutes\")[]"
      }
    },
    "openTo": {
      "defaultValue": null,
      "description": "First view to show in DatePicker",
      "name": "openTo",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DateTimePicker/DateTimePicker.tsx",
        "name": "DateTimePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "\"date\" | \"year\" | \"month\" | \"hours\" | \"minutes\""
      }
    },
    "hideTabs": {
      "defaultValue": null,
      "description": "To show tabs",
      "name": "hideTabs",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DateTimePicker/DateTimePicker.tsx",
        "name": "DateTimePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "dateRangeIcon": {
      "defaultValue": null,
      "description": "Date tab icon",
      "name": "dateRangeIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DateTimePicker/DateTimePicker.tsx",
        "name": "DateTimePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "timeIcon": {
      "defaultValue": null,
      "description": "Time tab icon",
      "name": "timeIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DateTimePicker/DateTimePicker.tsx",
        "name": "DateTimePickerViewsProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "ampm": {
      "defaultValue": {
        "value": "true"
      },
      "description": "12h/24h view for hour selection clock",
      "name": "ampm",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/TimePicker/TimePicker.tsx",
        "name": "BaseTimePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "minutesStep": {
      "defaultValue": {
        "value": "1"
      },
      "description": "Step over minutes",
      "name": "minutesStep",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/TimePicker/TimePicker.tsx",
        "name": "BaseTimePickerProps"
      },
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "minDate": {
      "defaultValue": {
        "value": "Date(1900-01-01)"
      },
      "description": "Min selectable date",
      "name": "minDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "maxDate": {
      "defaultValue": {
        "value": "Date(2100-01-01)"
      },
      "description": "Max selectable date",
      "name": "maxDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "strictCompareDates": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Compare dates by the exact timestamp, instead of start/end of date",
      "name": "strictCompareDates",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disablePast": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Disable past dates",
      "name": "disablePast",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disableFuture": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Disable future dates",
      "name": "disableFuture",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "animateYearScrolling": {
      "defaultValue": {
        "value": "false"
      },
      "description": "To animate scrolling to current year (using scrollIntoView)",
      "name": "animateYearScrolling",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onYearChange": {
      "defaultValue": null,
      "description": "Callback firing on year change",
      "name": "onYearChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/DatePicker/DatePicker.tsx",
        "name": "BaseDatePickerProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void"
      }
    },
    "leftArrowIcon": {
      "defaultValue": null,
      "description": "Left arrow icon",
      "name": "leftArrowIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "rightArrowIcon": {
      "defaultValue": null,
      "description": "Right arrow icon",
      "name": "rightArrowIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "renderDay": {
      "defaultValue": null,
      "description": "Custom renderer for day",
      "name": "renderDay",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(day: DateIOType, selectedDate: DateIOType, dayInCurrentMonth: boolean, dayComponent: Element) => Element"
      }
    },
    "allowKeyboardControl": {
      "defaultValue": {
        "value": "true"
      },
      "description": "Enables keyboard listener for moving between days in calendar",
      "name": "allowKeyboardControl",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "leftArrowButtonProps": {
      "defaultValue": null,
      "description": "Props to pass to left arrow button",
      "name": "leftArrowButtonProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Partial<IconButtonProps>"
      }
    },
    "rightArrowButtonProps": {
      "defaultValue": null,
      "description": "Props to pass to right arrow button",
      "name": "rightArrowButtonProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Partial<IconButtonProps>"
      }
    },
    "shouldDisableDate": {
      "defaultValue": null,
      "description": "Disable specific date",
      "name": "shouldDisableDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(day: DateIOType) => boolean"
      }
    },
    "onMonthChange": {
      "defaultValue": null,
      "description": "Callback firing on month change. Return promise to render spinner till it will not be resolved",
      "name": "onMonthChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void | Promise<void>"
      }
    },
    "loadingIndicator": {
      "defaultValue": null,
      "description": "Custom loading indicator",
      "name": "loadingIndicator",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Element"
      }
    }
  },
  "Calendar": {
    "date": {
      "defaultValue": null,
      "description": "Calendar Date",
      "name": "date",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "CalendarProps"
      },
      "required": true,
      "type": {
        "name": "DateIOType"
      }
    },
    "onChange": {
      "defaultValue": null,
      "description": "Calendar onChange",
      "name": "onChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "CalendarProps"
      },
      "required": true,
      "type": {
        "name": "(date: any, isFinish?: boolean) => void"
      }
    },
    "minDate": {
      "defaultValue": {
        "value": "new Date('1900-01-01')"
      },
      "description": "Min date",
      "name": "minDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "CalendarProps"
      },
      "required": false,
      "type": {
        "name": "DateIOType"
      }
    },
    "maxDate": {
      "defaultValue": {
        "value": "new Date('2100-01-01')"
      },
      "description": "Max date",
      "name": "maxDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "CalendarProps"
      },
      "required": false,
      "type": {
        "name": "DateIOType"
      }
    },
    "disablePast": {
      "defaultValue": {
        "value": false
      },
      "description": "Disable past dates",
      "name": "disablePast",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "CalendarProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disableFuture": {
      "defaultValue": {
        "value": false
      },
      "description": "Disable future dates",
      "name": "disableFuture",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "CalendarProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "leftArrowIcon": {
      "defaultValue": null,
      "description": "Left arrow icon",
      "name": "leftArrowIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "rightArrowIcon": {
      "defaultValue": null,
      "description": "Right arrow icon",
      "name": "rightArrowIcon",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "renderDay": {
      "defaultValue": null,
      "description": "Custom renderer for day",
      "name": "renderDay",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(day: DateIOType, selectedDate: DateIOType, dayInCurrentMonth: boolean, dayComponent: Element) => Element"
      }
    },
    "allowKeyboardControl": {
      "defaultValue": {
        "value": true
      },
      "description": "Enables keyboard listener for moving between days in calendar",
      "name": "allowKeyboardControl",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "leftArrowButtonProps": {
      "defaultValue": null,
      "description": "Props to pass to left arrow button",
      "name": "leftArrowButtonProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Partial<IconButtonProps>"
      }
    },
    "rightArrowButtonProps": {
      "defaultValue": null,
      "description": "Props to pass to right arrow button",
      "name": "rightArrowButtonProps",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Partial<IconButtonProps>"
      }
    },
    "shouldDisableDate": {
      "defaultValue": null,
      "description": "Disable specific date",
      "name": "shouldDisableDate",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(day: DateIOType) => boolean"
      }
    },
    "onMonthChange": {
      "defaultValue": null,
      "description": "Callback firing on month change. Return promise to render spinner till it will not be resolved",
      "name": "onMonthChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "(date: DateIOType) => void | Promise<void>"
      }
    },
    "loadingIndicator": {
      "defaultValue": null,
      "description": "Custom loading indicator",
      "name": "loadingIndicator",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Calendar/Calendar.tsx",
        "name": "OutterCalendarProps"
      },
      "required": false,
      "type": {
        "name": "Element"
      }
    }
  },
  "TimePickerView": {
    "date": {
      "defaultValue": null,
      "description": "TimePicker value",
      "name": "date",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Clock/ClockView.tsx",
        "name": "TimePickerViewProps"
      },
      "required": true,
      "type": {
        "name": "any"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Clock type",
      "name": "type",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Clock/ClockView.tsx",
        "name": "TimePickerViewProps"
      },
      "required": true,
      "type": {
        "name": "\"hours\" | \"minutes\" | \"seconds\""
      }
    },
    "ampm": {
      "defaultValue": {
        "value": true
      },
      "description": "12h/24h clock mode",
      "name": "ampm",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Clock/ClockView.tsx",
        "name": "TimePickerViewProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "minutesStep": {
      "defaultValue": {
        "value": 1
      },
      "description": "Minutes step",
      "name": "minutesStep",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Clock/ClockView.tsx",
        "name": "TimePickerViewProps"
      },
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onHourChange": {
      "defaultValue": null,
      "description": "On hour change",
      "name": "onHourChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Clock/ClockView.tsx",
        "name": "TimePickerViewProps"
      },
      "required": true,
      "type": {
        "name": "(date: any, isFinish?: boolean) => void"
      }
    },
    "onMinutesChange": {
      "defaultValue": null,
      "description": "On minutes change",
      "name": "onMinutesChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Clock/ClockView.tsx",
        "name": "TimePickerViewProps"
      },
      "required": true,
      "type": {
        "name": "(date: any, isFinish?: boolean) => void"
      }
    },
    "onSecondsChange": {
      "defaultValue": null,
      "description": "On seconds change",
      "name": "onSecondsChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Clock/ClockView.tsx",
        "name": "TimePickerViewProps"
      },
      "required": true,
      "type": {
        "name": "(date: any, isFinish?: boolean) => void"
      }
    }
  },
  "ClockView": {
    "date": {
      "defaultValue": null,
      "description": "TimePicker value",
      "name": "date",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Clock/ClockView.tsx",
        "name": "TimePickerViewProps"
      },
      "required": true,
      "type": {
        "name": "any"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Clock type",
      "name": "type",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Clock/ClockView.tsx",
        "name": "TimePickerViewProps"
      },
      "required": true,
      "type": {
        "name": "\"hours\" | \"minutes\" | \"seconds\""
      }
    },
    "ampm": {
      "defaultValue": {
        "value": true
      },
      "description": "12h/24h clock mode",
      "name": "ampm",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Clock/ClockView.tsx",
        "name": "TimePickerViewProps"
      },
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "minutesStep": {
      "defaultValue": {
        "value": 1
      },
      "description": "Minutes step",
      "name": "minutesStep",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Clock/ClockView.tsx",
        "name": "TimePickerViewProps"
      },
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onHourChange": {
      "defaultValue": null,
      "description": "On hour change",
      "name": "onHourChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Clock/ClockView.tsx",
        "name": "TimePickerViewProps"
      },
      "required": true,
      "type": {
        "name": "(date: any, isFinish?: boolean) => void"
      }
    },
    "onMinutesChange": {
      "defaultValue": null,
      "description": "On minutes change",
      "name": "onMinutesChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Clock/ClockView.tsx",
        "name": "TimePickerViewProps"
      },
      "required": true,
      "type": {
        "name": "(date: any, isFinish?: boolean) => void"
      }
    },
    "onSecondsChange": {
      "defaultValue": null,
      "description": "On seconds change",
      "name": "onSecondsChange",
      "parent": {
        "fileName": "material-ui-pickers-roc/lib/src/views/Clock/ClockView.tsx",
        "name": "TimePickerViewProps"
      },
      "required": true,
      "type": {
        "name": "(date: any, isFinish?: boolean) => void"
      }
    }
  }
}